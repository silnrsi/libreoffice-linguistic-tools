"""
Write Consistent Change Table file.

Note: file.write() converts \n to os.linesep.
"""
import datetime
import io
import logging

logger = logging.getLogger("lingt.access.CCTWriter")

class CCT_Writer:
    def __init__(self, filepath):
        self.filepath = filepath

    def writeSimpleReplacements(self, dataList):
        """
        param dataList: list with rows containing (old value, new value)
        """
        logger.debug("writing SFM file")
        now = datetime.datetime.now()
        with io.open(self.filepath, mode='w', encoding='UTF8') as outfile:
            header = (
                "c CC Table generated by the OpenOffice Linguistic Tools\n"
                "c from spelling checker data.\n"
                "c\n"
                "c This simple CCT makes changes to words in order to make\n"
                "c spellings consistent.  It can be run as a converter in\n"
                "c software such as Flex.\n"
                "c\n"
                "c Generated %s.\n"
                "\n"
                "group(main)\n") % now.strftime("%d-%b-%Y")
            outfile.write(header)
            for rec in dataList:
                oldValue, newValue = rec
                outfile.write(('"%s" > "%s"\n') % (oldValue, newValue))
        logger.debug("finished writing file")

    def writeComplete(self, dataList, markersToSearch):
        """
        param dataList: list with rows containing two elements
        param markersToSearch: string of space-separated backslash markers
        """
        logger.debug("writing SFM file")
        with io.open(self.filepath, mode='w', encoding='UTF8') as outfile:
            now = datetime.datetime.now()
            header = (
                "c CC Table generated by the OpenOffice Linguistic Tools\n"
                "c from spelling checker data.\n"
                "c\n"
                "c This CCT makes global changes to\n"
                "c a data file in order to make spellings consistent.\n"
                "c\n"
                "c Date generated: %s.\n"
                "\n"
                "begin > store(punct) d32 d33 d34 d35 d36 d37 d38 d39 d40\n"
                "                     d41 d42 d43 d44 d45 d46 d47 d58 d59\n"
                "                     d60 d61 d62 d63 d64 d91 d92 d93 d94\n"
                "                     d95 d96 d9  d11 nl endstore\n"
                "\n"
                "group(main)\n") % now.strftime("%d-%b-%Y")
            outfile.write(header)

            sfMarkerList = markersToSearch.split()
            for marker in sfMarkerList[:-1]:
                # all but the last marker should say "next"
                outfile.write('nl "%s " > next\n' % marker)
            if len(sfMarkerList) > 0:
                # the last marker contains the reference to look4changes
                marker = sfMarkerList[-1]
                outfile.write('nl "%s " > dup use(look4changes)\n' % marker)

            outfile.write("group(look4changes)\n")
            outfile.write("nl '\\' > dup back(2) use(main)\n")
            for rec in dataList:
                oldValue, newValue = rec
                if not oldValue or not newValue:
                    continue
                outfile.write('"%s"wd(punct) > "%s"\n' % (oldValue, newValue))
        logger.debug("finished writing file")
