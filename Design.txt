# vim: set filetype=conf :
#------------------------------------------------------------------------------
# Problems to fix and future enhancements.
#
# Now using Issues on Github to track clearly defined issues.
# However this file is still useful for a more ad hoc approach.
#------------------------------------------------------------------------------

To implement:
    modify dialog to add word gloss checkbox
    and python front end code
then run pylint


## 2024-07-17

Check "Move PoS above gloss" by default.


## Testing

get all tests to pass again
    primary difficulty is data conversion
    get an ICU converter to run in FW first
    maybe not all tests need to pass on ubuntu
keep things simple and test on 1 win machine + 1 ubuntu VM
also test in AOO.


## Linux Data Conversion GTK3

Occurs if the path problem is fixed manually with ldconfig.

GTK 2.0 vs 3.0 problem - affected by VMs maybe?
https://ask.libreoffice.org/en/question/132794/python-script-unable-to-print-to-console-in-libreoffice-gtk3/
    "After updating to Ubuntu 17.04, which apparently defaults to
    libreoffice-gtk3... uninstall libreoffice-gtk3 and install
    libreoffice-gtk (which uses gtk2)"
maybe ECDriver needs to be updated to gtk3

recommendation from Opaque:
dpkg --list | awk '/ii/&&/libreoffice/{print $2}' | sudo xargs apt purge --yes
sudo apt autoremove --yes
sudo apt install libreoffice libreoffice-gtk3 libreoffice-sdbc-hsqldb libreoffice-help-en-us --yes


## Linux Data Conversion path problem 09-Mar-2017

This is probably a SilConverters ECDriver error, not a LingTools error.
Can be fixed with ldconfig.

Library error: libmonoboehm-2.0.so.1: cannot open shared object file: No such file or directory. 


## Tests finish but then LibreOffice crashes.  

For example run_dlg_bulkstep1.
Commenting out the following line in runTestSuite.run_suite() avoids the problem:
    testutil.blankWriterDoc()
Perhaps the unoObjs paramater needs to be specified.


## Compare Spelling dialog fails to save user vars in Python 2

2021-11-30 12:56:11,335 - evt_handler.py 197 - 'ascii' codec can't encode character u'\u0905' in position 0: ordinal not in range(128)
Traceback (most recent call last):
  File "C:\Users\JimStandard\AppData\Roaming\OpenOffice\4\user\Scripts\python\pythonpath\lingt\ui\common\evt_handler.py", line 195, in wrapper
    func(*args, **kwargs)
  File "C:\Users\JimStandard\AppData\Roaming\OpenOffice\4\user\Scripts\python\pythonpath\lingt\ui\comp\spellingadjustments.py", line 336, in actionPerformed
    self.mainForm.getFormResults()
  File "C:\Users\JimStandard\AppData\Roaming\OpenOffice\4\user\Scripts\python\pythonpath\lingt\ui\comp\spellingadjustments.py", line 152, in getFormResults
    self.userVars.store("CharComparison", charcompString)
  File "C:\Users\JimStandard\AppData\Roaming\OpenOffice\4\user\Scripts\python\pythonpath\lingt\access\writer\uservars.py", line 67, in store
    stringVal = str(val)
UnicodeEncodeError: 'ascii' codec can't encode character u'\u0905' in position 0: ordinal not in range(128)


## Packaging

Perhaps caused by renaming MkoxtSettings.xdl to Mkoxt.xdl

(com.sun.star.deployment.DeploymentException) { { Message = "An error occurred while enabling: LingToolsBasic", Context = (com.sun.star.uno.XInterface) @16c3542d280 }, Cause = (any) { (com.sun.star.lang.IllegalArgumentException) { { { Message = "", Context = (com.sun.star.uno.XInterface) @0 } }, ArgumentPosition = (short) 0 } } }

Succeeds when installed in a fresh user directory.


## Powerful parser like LXML

Perhaps something like this could be useful for future mkoxt changes:

    oDom=createUnoService("com.sun.star.xml.dom.DocumentBuilder").parse(oZip.getByName("meta.xml"))
    GetOfficeVersion=oDom.FirstChild.getAttribute("version")


## Complete (but not exhaustive) set of tests

Phonology Examples          # result: writer contents  # DONE
    Phonology Settings
        Writing Systems
Grammar Examples            # result: writer contents  # DONE
    Grammar Settings
Abbrevs                     # result: writer contents  # DONE
Data Conv                   # result: writer contents  # DONE (suite fails)
    Apply Conv              # result: Calc contents    # DONE
Make Spelling Changes       # result: writer contents  # part done -- app
    Spelling Replacements
Word List                   # result: Calc contents    # part done: app, ui
    Word List File          # ui test only             # implemented
Step Through List           # result: Calc contents    # TODO
    Spelling Comparisons    # result: Calc contents
Export Changer File         # result: text file        # TODO
Script Practice             # result: (text box contents)
    Word List
        Word List File

Use bigExamples.xml in a grammar test.


##

Pull senses from lexicon as separate entries if found.


## 

Get odt_converter_test.py to pass.
    "Whole Document" didn't make any changes.
Include "Default Style" in list box when searching for para styles.


## simplify the bulk converter

- Ignore size altogether, as the Word converter does.
- Do not display all three font types -- just the effective one,
  based on the unicode range lookup. 

This would give a simple answer to "What are all fonts used in the document?"
And it would be simple (in the UI layer) to run a converter for each one.

Allow the option of either changing the font or changing to a style.
It would be nice to be able to create a new style,
with document defaults except using the specified font.

Texts with more than one font type will still need to be split up.


## Thought 21-Jul-2016

In odt_converter.py,
currently we use OdtReader.py to figure out what the values are for OdtChanger.

Instead, perhaps OdtChanger should:
1. Use OdtReader to find which converted string to use.
2. Parse the XML in a slightly different way to figure out what the current
   font and size is, to know whether we need to change it.

Or, we could just always set the font name, style name, and
size that are specified in StyleChange.
Yes, just set it, based on scope type and the step 2 check boxes.


## Possible Problem 15-Feb-2016

In the ODT document, a font may have an overridden font-name as well as
overridden font-name-complex.
Then it would show up as two different entries in bulk conversion.
So would the same text potentially get converted twice?
And it could show that for example Mangal is used,
when in fact it is only Times New Roman that is used,
although it was overridden to Mangal, so that's something.

-- A. Possible solution --

If text is marked with a particular font,
and that font is set to be converted,
then convert the text.
(Maybe it's not what the user wants, but that is up to the user to decide.)
If a particular section of text is marked to be converted twice,
then check for duplicates and just convert once.
If they are different then which one to choose?
Maybe complex preferred over standard.
(This is something the user can get around by just converting one at a time.)
All used fonts in the document should be listed, even if a font doesn't end up
contributing any of its glyphs because a fallback or other type font gets
used.

What about document default fonts?
One possibility is to have a "default" category.
That would make it clear that for example Times New Roman is never explicitly
used even though it is the default.
Although in that case, there could still be a lot of Times New Roman text.
But then that would be apparent in the number of samples.

-- B. Another Possible Solution --

Have one entry in the list be for "Times New Roman / Mangal",
and a different entry for "Times New Roman / Latha".
Defaults could be listed, so an entry might say "Default / Latha",
and another "Times New Roman / Default".

This seems like an accurate solution, but is it necessary?

-- C. Lookup --

It would be nice to avoid guessing by looking up character codes,
although that's not out of the question.
But one difficulty with guessing is that there might be an unknown font,
so we don't know whether to check complex or standard fonts.
Or can LibreOffice tell us that?
Wait a minute, we already know that from the XML file.
So we would just need to look up all characters in the samples and
determine if the characters are standard, complex or asian.
Although fonts such as Annapurna would be considered complex, wouldn't they?

It would be nice to have an option, disabled by default,
to convert characters by lookup.
Lookup would be based on ranges, not lists of characters.
Use the Unicode database file that tells the ranges.
0-256 = Latin
Ignore c.isspace() or c.isdigit() or c in string.punctuation --
assume it is whatever type the surrounding text is.
Base the assumption on the preceding character,
in order to make the code easier -- no lookahead required.


-- D. Are fonts such as Annapurna considered complex? --

No, they are considered Western.
It is all about the character set, which can be determined by finding
the Unicode block.

Unicode IPA (Doulos SIL) is also considered western.
CTL: Devanagari (Mangal), Tamil (Latha), Malayalam (Kartika)


-- E. A recommended solution. --

Looking at the above, here is a way to do all of this.
First, do we want to split up and merge sections based on lookup?
I think the answer is no, because if we do, then things get really
complicated, requiring lots of options, more difficult code,
and likely causing problems in the resulting document.

But lookup is useful, because it tells us whether the
string contains complex or CJK characters.
If it does, then we can consider the entire string as pertaining to that
font, and it can be listed that way in the font list,
without needing to display the other two fonts.
Now this is only information, because even if the lookup produces incorrect
results, the converter can still be performed in the same way,
if the user chooses the right font.

Maybe we should still show all three fonts in a different field.
I think if I use this, I would want to know what all three are.
If so, it could show more than one item in the list with the same name.
That could happen for different sizes as well.
Maybe two checkboxes:
[] Separate each font size.
[] Separate if other font types are different. 
The second checkbox could be considered an advanced feature.

With those two options, it seems like just about anything is possible that
someone would want to do.
If there is some complex and some standard text in a run,
then a TECkit converter could just convert the complex text,
so it hopefully won't be a problem.

-- F. Another thought --

Actually it might be good to move the checkboxes to step 1,
because we need it to read in the data correctly.
[x] Handle each style separately.
[] Handle each size separately.
[] Handle fonts of other types separately.  For example, handle
Devanagari complex data with Arial/Mangal/SimSun separately from Verdana/Mangal/SimSun.

-- G. Contradicting F --

No, let's keep a separating (or joining) checkbox in step 2.
The app layer will always store all font items as if fully separated,
and FontItem.attrs() will always return the full list of attributes.
Have a FontItemList object that somehow joins font items.
The items can be split or joined as needed.
If joined, a change to the settings affects each item in the group.
Joining and splitting does not immediately change any settings,
which makes it easier to see what the checkboxes do,
and may be useful for merging and then joining multiple times,
for example setting the size for everything, then splitting,
then changing some, then joining by style for a different type of change.
A box showing more than one setting should say something like "(Various)"
or "(Mixed)",
and maybe be italics, or something brighter like a yellow background.

One disadvantage with this approach is that samples will not necessarily
be shown in the order they occur in the document.
A serial number could be stored with each sample text to keep them in
the same order.
If there is more than one document, is this important?
Well, it doesn't seem like it would be that hard to do.
Actually we would just need to store one integer per font item,
which would tell the serial number at the beginning of the sample.
That would allow us to preserve the original order.

First implement everything separated, and then get various joins working.
But design the code in preparation for joining.
If the checkbox is named "Join" then it would better reflect what this
code would be doing.
 

## Bulk Data Conversion

3. When "Process Files" is pressed, show progress bar.
   If confirmation is checked, then show Data Conversion confirmation dialog.
   When converted, show message box "Done!".

Choose what output format, or only output ODT?
To start with, only output ODT.

Use current (possibly blank) writer doc for possible destination fonts.
This is what Data Conversion does -- it allows a new style name,
and input fonts can be custom entered,
but output fonts are chosen from a fixed list.
In this case though, input fonts will be fixed.
It might be hard to create output styles, but that would be ideal.
Probably don't worry about that for the first attempt.

Second screen shows the results of the scan:
a list of all fonts and styles found in the files,
and the target font or style after it is specified.
- Font found
    "Annapurna"
- Character or Paragraph style if not custom formatting
    "MyCharStyle"
- Target font and style 
    "Mangal MyCharStyle"
That's still a lot of information per row, even though it is all Latin.
What about just font(style) or font(custom), and + if changes of some kind.
+ simply shows whether No Converter and Do Not Change are specified,
and hopefully this will be clear without needing a label.
(Show in documentation as well).
Can down arrow through list to see each item.

If a font is used without a style, then it should be shown as a font (Custom
Formatting).
This is consistent with how Data Conversion works.
If a font is used only with a style, then show as a style, telling what the
font of the style is.
If a font is used with and without a style, then show as two entries.
Could be more than two entries if a font is used with several styles.
    That could get annoying actually, if we just want to convert everything
    which uses that font.
    Checkbox to handle style and custom formatting together,
    which will change the list entries to just font instead of font(style).
    This will also grey out the target style fields.

If a size is not specified, then keep the original size,
which would allow multiple sizes to not get changed.

Delete folder with XML files when processing is finished.
Perhaps put such files in the Temp folder instead.

Maybe this will help in Bulk Conversion for .doc files:
libreoffice --convert-to


## Data Conversion string type problem

On Linux, SEC_wrapper is returning bytes rather than unicode string.
This is a problem in Python 3.
Perhaps the reverse is true for Windows and Python 2?
Anyway either make bytes work, or convert to unicode strings.
LibreOffice seems to accept either one, but it would be good to test this.


## Default complex font size for interlinear examples

In styles.py, FONT_ORTH is created with only the complex size set,
not the western size.
So a punctuation character by itself will be smaller size,
which does not line up well.
This can be changed by editing the style manually,
but people may not know to do that.


##

Menu could be "LingTools" rather than "Linguistics" to avoid confusion with
Writer built-in features.
However there is no other "Linguistics" menu option, and probably no one
has gotten confused about this.


## reorganizing idea 28-Apr-16

MessageBox and UserVars go along with the document, like UnoObjs.
It would be helpful to create another class called MainDocObjs that inherits
from both.
UnoObjs would still not be abstract,
because not all documents are main documents,
for example the one opened by ExUpdater.
Many methods would require only UnoObjs,
but passing MainDocObjs to such a method is perfectly acceptable.

ProgressBar is somewhat temporary but could perhaps be a member as well,
just not initialized by default.

Would Calc documents be MainDocObjs?
Yes, if the dialog is called from Calc.
There would just be no user vars.
Perhaps that should be a class of its own.

The advantages of all of this are that it would simplify arguments and
class properties, and would more precisely express what is going on,
because it would be clearer what each class needs or uses.
However the disadvantage is that there would be lots of lines like:
    self.app.mainDoc.userVars.store(...)
Instead of:
    self.userVars.store(...)
And it would not be surprising to find that PyUNO couldn't check it.

Is there some other way to store mainDoc,
for example as a module level variable?
Perhaps:
    util.mainDoc.userVars.store(...)
Methods that use multiple documents would use variables that are more
local than util.mainDoc.


## Dialog controls font

Changed column to Gautami font for Telegu. However in Step
through List, still shows up as boxes.


## Faster updates?

Freezing screen is done with method lockControllers() of the document's Model.


## Spelling split up words

Suggest splitting up a whole word into two words with spaces.
For example if the good word list contains "big" and "dog" and it finds a
word "bigdog", then suggest "big dog" as a replacement.
Likewise if it finds "big-dog" or "big,dog".


## XSLT partial matches

Match whole words like a full CC table does, or better.


## Update optimizing problem

inner table problem.odt
Change col width to 7%
Insert a second example
Update all
Result: Second example is optimized badly.
        Also the scrollbar does not work (unmaximizing fixes this).
Could not reproduce this problem starting with a new document.
This problem does not occur with Windows OpenOffice.


## Font display size problem

In Step Through List, some words are really small in Tamil.
However some are just fine. It depends on the word.
For example AA is small but A is fine.
The words appear this way in the formula, so this is not a simple problem.
Setting font size 14 at least makes the smaller size not so small,
even though the size still keeps changing.


## CTL font wrapping problem

WrittenTamilTexts.xml.Hunt02 tables does not wrap well when orthographic
lines are included (change fields to \or and \mbor).
Seems to be a Tamil script problem with mborth=kaliyana,
which goes across two lines.
Changing font from Latha to Lohit Tamil fixes the problem.
Probably there will not be a problem with Latha on Windows.
The best solution may be to use a font that works right for your system.


## Updating does not find first example if at very top of document (no space).


## Updating on failing to copy old ex num pastes whatever might be in clipboard.

Should check to see if what was copied is 0-length, or maybe if it failed or
something.


## Grab Examples changing radio buttons crashed.

Seems to only happen sometimes.
Version: LO 5.0.3
Maybe happening because control labels are changing,
and it is having a hard time rendering the changes.


## Disposing

Do not crash if blank document gets closed.


## Ignore button presses

Disable dialog so that the user does not keep clicking on buttons
while a macro is executing.
- I accidentally did once.


## Don't show uno.exe crash

Is this possible to avoid?
It would be nice to show an error message about rebooting.


## Testing a deployed file

Often we want to verify the input and output parameters.
Can we have a driver or a receiver that checks each parameter?
This would not necessarily verify correct functionality,
just the parameters passed.
Question: When the extension is installed, where does the python code go?
          How to call it?
          The menu calls it by its service name.
          Can a button call it that way too?


## Possible new major version

Connect directly to FieldWorks,
which means no need to save as XML,
which would be nice since it needs to be constantly updated otherwise.

Perhaps read from FW database using LO Base.
Could supply a LO Base template for this purpose.
Then in Writer Linguistics menu,
in phonology and grammar dialogs add a control to specify database source.

Would also be nice to have a way to automatically add reference numbers.
Perhaps the connection could be used to modify the FW databse.
Or ref numbers could be added in LO in a place that does not affect the
FW database.


#------------------------------------------------------------------------------
# Version compatibility
#------------------------------------------------------------------------------
OOo 3.0.0 on Win uses Python version 2.3.4
set(fontList) does not work.  Instead use Utils.uniqueList().
RuntimeError, IOError as exc -- change to (RuntimeError, IOError), exc
    'as' exceptions require Python 2.6
In older versions of python it is illegal to add () after a class declaration.
The @staticmethod decorator is new in version 2.4, so it does not work.
sort(key = ) does not work. Instead pass a function that compares values.
FilePicker must be initialized for OOo 3.0


#------------------------------------------------------------------------------
# Importing
#------------------------------------------------------------------------------

importing hierarchy:
Components.py
    loads UI.DlgSettings
        imports File.Utils
            imports File.Locale
        imports App.Phonology
            imports Data.PhonEx
            imports Writer.TabbedPara
                imports Data.PhonEx (or just uses such objects)
            imports Writer.Search
            imports File.Utils
                imports File.Locale
        imports App.Grammar
    loads UI.DlgGrabEx
        imports App.Phonology
        imports App.Grammar

We could possibly use inheritance in the matter of grabbing examples.

#------------------------------------------------------------------------------
# bugs
# - to get an idea of what could be tested for
#------------------------------------------------------------------------------
Used both dlg and self.dlg, so self.dlg ends up staying None.

Passed a dict intended to be shared between two objects, then in one of the
objects assigned it, which means they no longer share it.

Called a method that did not exist.  Perhaps pylint didn't catch it because
the object was passed as a parameter first?

ctrl.setText() may crash.

Passed (x, y) as params instead of x, y.

Passed y, x when it should have been x, y.

Passed the string but forgot to include its interpolating arguments.

Fixed bug in one place but not the same bug in another place.

Used len() but didn't implement __len__().  Pylint did not check this.

import uno failed because /program wasn't in sys.path.

import failed because package name case was incorrect on Windows.
    Pylint doesn't check for this.

Called a function with a named argument that did not have such a parameter.
Surprising that pylint didn't catch that.
Exception was a TypeError, and made AOO/LO fail silently.
The next error was an UNO exception,
and AOO displayed that one,
so perhaps it displays UNO exceptions but not python exceptions.

With repeated actions with multiple steps, should have handled the last action
differently.

Passed a list instead of a tuple to UNO.

Bug introduced by refactoring:
    prev code:
        a = x.y  # y is an immutable value
        b = x.y
        x.y = c
    new code:
        z = x.y
        a = z  # fine
        b = z  # fine
        z = c  # does nothing

Troubleshooting problems:
    Assimilated wrong office suite.
    Packed instead of assimilated.
    Forgot to assimilate or pack.
    Didn't save text file.
    Changed assimilated file and then assimilated, overwriting changes.
    Introduced a syntax error, so debugging statements don't show.

#------------------------------------------------------------------------------
# Using Visual Studio
#------------------------------------------------------------------------------
Editing code and tests can be done using the solution explorer.
Disadvantages:
- Minimum two clicks to switch between files, and perhaps expanding and
  scrolling.
    + This doesn't seem as good as buffers, although maybe it is
      better for larger projects where I am not as familiar with the code.
    + This is a substitute for the following Vim commands:
        - :b#
        - :ls
        - BufExplorer menu
- VsVim is limited in quite a few ways.
    + ga (does Alt+X work like it does in Wordpad?)
    + ^F (PageUp and PageDown are ok but less convenient)
- Text editor pane takes up about an inch more room than needed.
- Not on Linux.
- Support is not available for all languages.  For example support for
  Perl is probably not as good as for Python.
- IDE's may change more than text editors and command lines,
  so it might not be as good for people who are not fulltime software
  engineers.

Advantages:
- Automatic imports, check for undeclared vars.
- Navigate quickly to definitions.
- IntelliSense for builtins and libraries.
- Easier source control with git. (haven't tried)
- Industry standard.  For example Steve McConnel uses it.
- The professional version is probably better,
  so if the toolchain approach (Vim/Powershell/File Explorer) is roughly
  as good as an approach using VS Community Edition,
  then the pro version might tip the balance in favor of the IDE.
  That could be a reason to learn the IDE even with the community edition.

Are the coding assistance advantages really better than requiring an
understanding of how the code works?  Maybe.
For example I have grown accustomed to syntax highlighting.
Although part of the reason for that is it makes code easier to read,
not just detecting problems.
But coding assistance can also make it easier to read by showing where the
declaration and definition is for a particular item.
All things considered, it is probably a benefit.
It just might not always outweigh the cost.

Running from within Office will still be a separate window of course.

To run tests, perhaps VS has some way of running a bat file.
For assimilating code, ps1 files.
Also view debug files.

Finally delete debug files.
Will still need a powershell prompt open for this at least.

Then of course there's viewing this Design file.

NetBeans worked well for viewing a large Java project,
and the IDE was able to follow declarations and definitions.
A small Python project that I wrote is an entirely different matter:
- Python's loose structure is difficult for an IDE to follow reliably.
- For small projects, just opening up all file(s) at once is easier.
- When I know the code inside and out ("all in my head"), it's easier to
  navigate with a couple
  of keypresses than to have to browse to things with several clicks.
- The IDE may not be able to run the project from within LO.


#------------------------------------------------------------------------------
# Done
#------------------------------------------------------------------------------

spelling tools dialogs don't open in LT 4.0
    because oxttools raises an error when imported

for version 4.0
    choose interlin/phon examples from list
    documentation should say "LibreOffice" instead of "OpenOffice Lin..."
    leave case as in FW, and sort list
    - sorting by GUID not helpful
    - match case insensitive for lookup
    - be sure list is sorted 1, 2.1, 2.2, 3, 4, 5.1 etc.
    Draw conversion
    "Interlinear Setup / Examples" rather than "Grammar Settings / Examples",
        but "Phonology Setup" rather than "Lexicon Setup".
    Make check box to pull ref numbers from FW hidden?
        People want to check it but it normally shouldn't be used.
        Instead of hiding it, change to the opposite and default to checked:
        "Generate Flex ref numbers (1.1, 2.1)"
    create oxt - use xml.etree code and create dialogs for it
    warn about duplicate IDs before closing Interlinear Setup
        """"The following Ref Numbers have duplicates: 1, 2.1, 2.2, 3, ...271 more.
        #And for Interlinear but not Phonology
        Either change the numbers or, if they are in different texts, add a
        prefix for each text.
        """
    check if only one number in paragraph and remove .1
    Sorteddict is not helpful for reading interlinear data.
    nothing happening when menu options first used
        perhaps fails to create dialog because no dlg:helptext
        updating dialog strings seems to have fixed the problem
    update documentation
        make oxt
        interlinear setup changes
    get new oxttools code to work with Kayan

Use configuration instead of user vars for Calc and Draw. [rejected]
    Possibly put global settings in config and doc settings in user vars.
    Abbrevs and interlinear setup should be per document, not per user.
    Either create a special dialog to edit them ("LingTools Settings"),
        or perhaps extension settings are good enough.

data conversion may still require 32-bit LO
    No, it works on Windows.
    LO Version: 6.4.3.2 (x64)
    C:\Program Files\SIL\FieldWorks 9\ECDriver.dll
    ICU transliterators seem to have a problem.
    TECkit, CC, and Perl are working.

user var for phonology flex fields

Fixed bug:
dataconv_test test1 causes test2 to fail if reverse loop is False, True.
An error not during an automated test seemed similar, returning -21.
It was with reverse Any-Upper,
applied in Calc.

In script practice dialog, the big text box has "a" underlined.
Abbrevs search should not allow empty style name.
Phonemic form in citation field.

REVERSE() doesn't work in python 3.
Don't allow pressing "Change" if no change was made.
Labels must come immediately before their text box for hotkeys to work.
If not matching case, suggest only words of the same case as the word found.

Version 1.9.9.12b
Use // for integer division in Python 3, and float() to force in Python 2.
Set default value for txtXpath.
The function name is displayOkCancel, not displayYesNo.
Full CC table ignores final \sf marker in list.
Add localized strings for "Match partial text."

Version 1.9.9.11b
divmod returns a float as its first argument.
Make Spelling Changes dialog failed to open.
    dict_items object has no attribute 'sort':
    self.localeList.sort(key=lambda tupl: tupl[1])
Browse... did not add .xsl, so filename is just "1".
    Problem seemed to be with +=
No columns available in Field / Part for spreadsheets.
    Python 3 does not define xrange.
Choked When converting SFM markers.
    No string.join() in Python 3.
In Script Practice dialog, "E" of "Ecriture" is partly cut off.
In Spelling Search dialog, "les style" is cut off at the end.
In Script Practice title, after going to practice and back
    again, "e" is shown as block question mark.
    Problem was missed 'u' in front of string, which is a problem for Python 2.
"Made 0 corrections" was in English.
    Problem was passing % converted string instead of just args.

Version 1.9.9.9b
Writing system is only for phonetic / phonemic, not gloss.
Replacing all said "Updated 1 example."
When inserting grammar examples without outer table, ref no. char
    style carries over to the next line.
Updating did not find example 2.
    Finds 2 if not updating example 1.

Version 1.9.9.8b
Updating phonology examples chokes.
Updated a lot of examples but then at the end said did not
    find an existing example to update.
Should change extension when radio buttons are changed, not later.
    Make Change File chokes.
Changing para style Interlin Gloss failed for some inner frames.
    Solution is to use travelCursor instead of viewcursor.

Version 1.9.9.7b
Change Spelling choked on "greens". Missed selection.
Grammar updating allows no new outer table but it does not work well.
When updating examples, cannot find existing ref number to update if it is
    located on the next line after a line containing a ref number.
    This is bad for phonology examples, where it will only find every other one.
Updated many examples and then said did not find any more existing examples.
Phonology not applying Lex Example para style.
Choked when "3.ods" Step through list with "updating problem.odt" opened.
    Read occurrences into word.text, and numbers cannot len() or .strip().
Filename extension should change if radio buttons are changed.
CCT datestamp is still wrong.
Set number of words to "0". Used 1, but did not change value in text box.

Version 1.9.9.6b
Cannot search by complex language.
Spell checking dialog font is small for Tamil.
If Word and Correction are the same, keeps changing.
    Should just ignore it.
Date stamp shows year first instead of last.
Cannot clear Correction column for a row.
Cannot tell by looking at checkbox whether row has an "X" in the
    Correct? column or not.
Cannot change Correct? button unless correction value is different.
Choked when getting words from SFM file.
Apply Converter missed final row.
Says "No data found" unless data is in row 3 or higher.
Can only navigate to maxRow - 1.
In spell checking, does not find last word in good list.
Does not work to convert by Default Para or Char style.
Spacing again: An example with just one frame shows a big
    space above the free translation.
    It disappears if you type something after the frame.
Find Next for updating gets stuck on the first one if it is not
    at the end of a line.
    It keeps searching from the beginning.
Updating grammar keeps saying "Found a ref number, but needs outer table."
    Once is enough; then just keep going.
Replacing grammar examples deletes the next character.
    Occurs using tables (not frames) with no outer table.
Vattalaki was set to ref number char style instead of JPDN.
    With all settings set to opposite of default.
Error message says "Column width is not a number" but then
dialog closes anyway, so there is not a good chance to fix it.
DlgWritingSystem did not close when selecting Sena (seh).
    When Sena (x-etic) is selected, "seh" is erroneously obtained.
After replacing a phonology example, following example has style messed up.
Same thing occurs if an example is inserted with the cursor at the
beginning of a line containing an example.
After inserting a phonology example, char style is still Lex Ref Number.
When no writing systems are found, writing system selection still appears.

Version 1.9.9.5b
Hyphenated words are inserted as a single word in the word
list, yet spell check looks at each word separately.
When updating examples using tables, without outer tables,
the screen flashes strangely as it traverses through looking for the char style.
It makes it pretty slow.
    This happened because the whole document was the ref char style, because of
    the grammar inserting bug which is fixed now.
When inserting grammar examples without an outer table,
free translation in second example uses ref number char style.
When replacing grammar examples without an outer table,
it deletes the next character (for example #).
If mainDoc is None Then: Does not seem to work.
Affixes should be greyed out for corrections when dialog is first opened.
Problem: Making corrections by quotation char style did not find
    anything. However emphasis char style worked.
Choked when making spelling corrections by language.
Saving as XSLT choked. Wrong number of params to userVars.set.
Date for generated files.
&DlgChangeMaker.HelpText appearing on dialog mouse hover.
Button to set correction should be disabled after pressing it.
SpreadsheetReader while oCells.hasMoreElements() took 34 seconds (4,000 rows).
slider bar graphic seems to have a problem in Ubuntu
Works fine on Windows and also I think Fedora with KDE.
Setting row complains when typing "15" because on receiving "1",
it throws up a message box complaining it is not high enough.
Choked When getting word list from SFM file.
Apply Converter defaults to empty for columns.
Display full ws representation in parenthesis in the ws selection box.

Version 1.9.9.4b:
Word list is stripping word final 'e' instead of just punctuation.
Selecting a writing system did not stay when going back to change
word list settings.
Harvesting from .lift files seems to require a ref. no, which is
probably not going to be common.
Getting words from SFM files does not seem to work.
FieldWorks LIFT files put the writing system files in a subfolder called
WritingSystems.  So OOoLT should look there for ldml files.
Replacing phonology examples messes up tabs on next line.
Test FW 7.2.7 data.
Download latest version of Toolbox and test output XML formats.
Make practice fields a little wider, in case we want to
practice longer sentences.
When returning from adding an input file for script practice the
first time, it said "Make List" instead of "Get Words".
Full CC table splits up markers by individual character,
that is, "\ " "l" "x" instead of "\lx".
If there is only one file in the list, then it should be
selected / used by default when changing settings.
Option for look4changes to handle partial strings.
XSLT file should require only 1.0
XSLT file look4changes should say "name", not "match"
XSLT file look4changes should say "node()", not "self"
Do not allow setting a correction if the new is the same as the old.
In Step Through List, some words are really small in Tamil,
too small to see the difference between initial A and AA.
However some are just fine.  Does the font size change from row to row?
Perhaps the fields need to be taller because some glyphs require more room.
In Step Through List, keep same row we left off in, until
a new word list is generated.
Apply Converter is not defaulting to changed columns for second list.
Apply Converter is not defaulting to Skip first row.
REVERSE() does not work for complex scripts.
Searching abbreviations found a blank string and suggested it.
Punctuation \u201c and \u201d not in list by default.
Comparison doc buttons do not seem to find the examples in the main doc.
Only create one window for comparison doc for each source document.
Allow generating more than 9 words.
Spelling Search Options dialog radio buttons do not work right;
cannot select both SFM and Apply Corrections.
In Spelling Char Comp, have all boxes checked by default.
Resize frame in DlgLingExamples to include the whole top.

Version 1.2.5:
For Data Conversion inside tables, use getPosition().X instead of compareRegion.
Pure python -- use ctypes instead of C++ component for SEC.

Accept "Source" field from FieldWorks as ref no.
Add French translation for Script Practice.

Fixed problem with inner tables getting out of order.
If an example is inserted and then updated before closing the dialog,
then the example number never gets created.

Allow unknown characters in script practice.
Better error messages to require script practice input files.
Handle PA experimental transcriptions.

Fixed data conversion "Free Translation" problem by using text portions instead
of cursors.
Convert frames and nested tables.
Preserve character styles and newlines in Data Conversion.
Convert footnotes.
In DlgExGrab, when changing labels for updating, show localized labels.

Released version 1.0.0
Don't add an extra newline when replacing ref numbers.
Fixed bug: Extra goUp(1) before deleting the old phonology ex.
Fixed bug: Selecting WS doesn't show up in the box.
Spacing below inner tables instead of on POS or gloss.
Fixed bug: When OOo dialogs are enabled, FilePicker could select a directory.
User variable to disable showing comparison document.
Font to font data conversion.
Scope character style.
Set tab order of dialog windows - Abbreviations.
Fix radio button grouping in Data Conversion.
Set the table to 100% Relative width to try to fix thin column problem.
When the inner table goes past the bottom of the outer table,
optimizing causes the first row of the inner table to get messed up.
Need to have both word lines in merged columns of the table.
Updated help documentation.
Update All with a large number of examples.
Fixed bug: Consistently go to end of table before going down 1 line.
Faster method of finding ref char styles.
Get updating grammar examples working basically correctly.
Ability to update phonology examples.
In Search, ignore char style strings of zero length.
Updating Examples should default to NOT Search from beginning.
Don't complain about needing TextTable until Update Example is pressed.
Handle orthographic lines in FieldWorks.
If styles are missing, only show a single message before finishing.
If styles are missing, don't silently fail.
User var for other tag names, for example gl instead of ge in toolbox.
In Data Conversion, create a new paragraph style if not yet done.
If an existing style is selected, the box shows what font, and the user can
change it if it is wrong.
Selecting Do not change style clears and disables the target font.
Option to specify which font, so that boxes don't appear.
Split Toolbox \or by "\s*" and line it up with items in \tx.
For version 1.0 require outer tables to update interlinear examples.
Button to update all examples.

1. User selects radio button "Update existing examples" instead of search
   for #ref numbers
2. User presses "Find Next"
3. User presses "Update example" (or Find Next to keep the old one)
   A new example is inserted.  The ex number is moved to the new example.
   Then the old table is cut and pasted into a new document.
   The new example is also copied and pasted into the new document, but
   marked with a different color in a separate section.
   Below the old table, insert hyperlink to the new table in the main document.
   The hyperlink includes a macro that brings the main document to front.
4. User presses "Close"
   Go back to the old document.
5. User goes to the new document and looks for examples that need fixing.

When modifying an abbrev, don't remove occurrences unless abbrev changes.
Bug fix: Frames don't seem to be getting sized correctly.
Bug fix: Data conversion source should only include paragraph styles.
If example is not found, then replacing should not delete the ref number.
Make an uninstaller so that the menu goes away. "RemoveLingMenu.oxt"
Phonology import XML instead of SFM from Toolbox.

In empty combo boxes, getText() returns localization string.
    Solution is setText("") first.

Help file gives General Error
    The .lock file is not able to resolve %origin%, which causes General Error.
    Use a macro to open the files instead, with PackageInformationProvider.

Large examples are slow.
- In Grab Grammar Examples, set outside row height to fixed until the data has
  been inserted.
- Also temporarily insert newlines between a lot of frames.

Test suite for Data Conversion.

# Bugs in Data Conversion
Skipping single characters or 0 length characters.          # fixed 8/1/10
grabbing the whole document as a string                     # fixed 8/3/10
text in a selected table is converted but not formatted     # fixed 8/3/10
add character target style                                  # done 8/3/10
In test3.odt the last character gets moved to the front.    # fixed 8/4/10
SFM markers turn to 0.                                      # fixed 8/4/10
<No Converter> fails the first time.                        # fixed 8/4/10
remove preserve formatting                                  # done 8/4/10
Changing paragraph style doesn't change font completely.    # fixed 8/4/10
Using new code with a converter duplicates a character.     # fixed 8/4/10

Tables size per row
Simplify tables
Option to put part of speech above gloss
Option to single quote around free translation
By default, add spacing below part of speech style.

Open the help file in read-only mode.

Grammar examples tests.

Inserting frames with CTL font is slow.

Data Conversion - convert values inside tables.
Checkbox that tells that converter is reverse.
Make try block around changeTextRange.

Option of not inserting the outer table at all.

Option to show morpheme breaks separated by
dash rather than separate columns / frames.

Preserve character formatting

Handle large amounts of text
Chunks of 1024 characters at a time.
    Use gotoNextWord(True) until greater than 1024, then backtrack one.
    If length is 0 as a result, then use goRight(True)
    Pitonyak section 7.3.4.3

SFM markers

Reverse direction of conversion table
    How does this interact with the AutoSelect options?
    Perhaps the AutoSelect options are enough.
    Likewise with normalizing.

Show a waiting dialog
- Only needed the first time when the data is being loaded.
  "Reading XML file(s)..."
- A waiting dialog may make things more complicated for the user, because there is waiting for loading, and then waiting a shorter time to insert examples.  I suppose we could show a dialog box both times.
- Or perhaps we can just show a busy cursor.

Help files
- create PDF, then have option to show from a menu within OO,
  perhaps from the writeups menu.
    + reference the file in manifest.xml
    + html, PDF, odt
  perhaps display in a custom dialog box

W&riteups top-level menu
    #radio Phonology
    #radio Grammar
    Get &Phonology Examples
                  - buttons:
                    + find next reference (can just press this again to skip)
                    + replace with example
                    + replace all with examples
                    + close
                  - A checkbox to search backwards?
                  - Also an option to update examples.
                  - Also an option to just type in a reference number
                    + ignores any preceeding pound sign, as well as white space
                  - Very similar to find and replace
                  - If example is not found, gives an error instead of
                    showing the yes/no etc dialog box.
                    Highlights the problem example number?  Or asterisks?
                  - Be sure to give an error message if settings have not been
                    set.
    #Get This Example
    #Load All Data
    &Formatting Tools > (submenu)
    ------------
    Settings - Phonology
    Settings - Grammar

"Writeups"
"Examples"
"Grammar" / "Phonology"
"Language"
"LangData"
"Linguistics"
"Import"
"Load"
"Data"

First priority is phonology.
1. In FieldWorks: lex, gloss, refnum
2. Import into IPA.
3. Save as RTF.
4. Enter #(exnum)
5. Run macro that grabs all values.

It is not preferable to attach a separate python text file,
especially if it has to be put in a special user folder.
Also we don't want the user to have to use a configuration text file.
We can use a form instead to specify options.
Probably first try to emulate the function, with perhaps some improvements,
and then later check the code to see if we missed any functionality.

So the big question to answer first is,
what options are available for bundling macros into a document in a nice way?
- Forms
- embed the script within an OO doc
- packages (read-only)
- extensions - looks like an interesting possibility
    + like Zotero.oxt
    + just double-click on the extension, and then view the toolbar.
    + wouldn't even need a .odt file
    + Can we include sh2xml.exe inside an .oxt file?

Let's think of how Zotero functions.
1. Make changes in Firefox (Phonology Assistant for us).
2. Specify the options using a toolbar button in OO.
    - this sets or modifies styles
3. A button to insert a single example.
4. Another button to insert a whole set.


Grammar
    wrapping
    - table is fine
    - don't let the \tx line wrap
        + It seems like this won't happen by the optimize command unless there
          are way too many words on a single line.
    - other lines may be able to wrap
    - perhaps selectively use optimize and set width on specific columns,
      depending on how many characters are in the contents.
    - if longer than a certain amount, add another line
    - if more than one line is needed, then try to distribute the amount of
      text so that there is not more wrapping on the 1st line than the 2nd.
        algorithm:
        1. determine how many lines are needed
        2. distribute as evenly as possible while filling up all non-final rows.
           (It's ok for the final row to be full too).
           For example, say max 10 words per line, but 8 is better.
            A sentence has 17 words.
            17 div 10 = 2, so two rows will be needed.
            17 / 2 = 8.5, so 9 in first row and 8 in second row.
    select files
    - three browse buttons, for up to three different files
    - each file can be either FieldWorks or Toolbox XML files
    - the program can determine which kind it is by reading the file
    - If the XML is not of the right file type, then an error is shown
    - It would be nice to check this when closing the settings dialog,
      or even when finishing the Browse... button.
    FieldWorks reference numbers
    - The macro can calculate the "1.2" values without too much difficulty.
    - If there is more than one file, include the first few characters of the
      title in the reference number. Ex: #Pig1.2
    font size
    - Font size is important in order to choose the right number of characters
      on a line.
    - Specify font face and size in the dialog.
      Get current style attributes if any.  Then when OK is pressed on settings,
      update with new style attributes.
      If it's not to hard to have a color chooser, then might as well specify
      color in the dialog box too.
      Perhaps this is a feature that could be left until later.
    Interlinear fields
    - Text (TextIPA), Morpheme break (MorphemeBreak),
      Part of speech (PartOfSpeech), Gloss
    - for each, option to choose font and size,
      and checkbox to include it or not (Text is required)
    #- also may need to specify fields found in XML file
    - Guess which fields are in the XML file,
      for example Gloss should be ge or gl or g,
      in that order of likelihood.
    #Free translation, Reference (checkbox greyed out)
    Checkbox to insert an example number
    Checkbox whether wrapping non-Text fields is allowed
    #- Or perhaps we can say Character Width: "Small (works for 9-10 pt),
    #  Medium (works for 11-12 pt), Large (works for 14 pt),
    #  Extra Large (works for 18 pt, or 14 pt fixed with)

